1. NCO and DCA start
2. NCO_DIR/deploy_module_helper.py --module "nco_challenge_response" --host 1 --priority 42
    ->> deploy_module_helper.py 
        -calls insert_req_build_module in CIB_helper
        ->> CIB_helper.py
            -insert_req_build_module(con, host_id, module, active_mode, priority, apply)
            -inserts module params into req_build_modules SQL database

    ->> NCO_construct.py
        -construction_loop(db_connection to cib.db) 
        -retrieves all rows from SQL database 
        -Key is generated
        -build_ko_module(host_id, module_id, module_name, key, active_mode, priority, applyNow) (NCO_construct)
            -creates builder.sh script with specified parameters
        -insert_and_update_module_tables(db_connection, module_list[i], cfg.next_module_id, host_id_list[i], key)
            -insert_built_module(db_connection, host_id, module, module_id, int(time.time()), key, require_install, install_time)
                ->> CIB_helper.py
                -Adds module to built_modules SQL database

    ->> NCO.py
        -device_thread
            -connects to cib.db
            -retrieve_install_list(db_connection, host_id), returns modules
            -if len(modules) > 0
            -send_install_modules(conn, host_id, modules)
                ->> NCO_deploy.py
                -ensures host is ready to receive ('Clear to send' from host_id)
                -send_ko_module(conn_socket, host_id, module)
                    -sends ko module as JSON to host_id
                    -calls request_report (NCO_monitor.py)
                 
    ->> DCA.py (at host)
        -in while True loop, if 'cmd = recv_module'
            -this calls recv_ko_files(conn_socket, count)
                -'Cleat to send' message is sent
            -calls install_ko_file(conn_socket, filename, filesize)
                -receives the entire .ko file from NCO in binary format (puts in /usr/lib/modules/{system release}/layer4_5)
                -runs insmod "filename" on received ko file
        -Module is installed

3. NCO_DIR/revoke_module_helper.py --module "nco_challenge_response" --host 1 --deprecate
    ->> revoke_module_helper.py
        -calls select_built_module(db_connection, args.host, args.module)
            ->> CIB_helper.py select_built_module to find module "nco_challenge_response"
        -insert_req_deprecate(db_connection, args.host, id)
            ->> CIB_helper.py inserts host_id and module_id to req_deprecate database

    ->> NCO.py
        -device_thread
            -retrieve_deprecated_list(db_connection, host_id)
                ->> NCO_revoke.py 
                    -deprecate_list populated from select_all_req_deprecate(db_connection, host_id)
                        ->> CIB_helper.py
                            -returns all modules in req_deprecate with matching host_id
                    -x[1] is extracted from deprecate_list to get mod_id
            -if len(deprecate_id_list) > 0 (back in NCO.py), add to deprecate_id_list
                -deprecate_module(conn, db_connection, host_id, deprecate_id_list[i])
                ->> NCO_revoke.py
                    -deprecate_module updates 'cmd' to 'deprecate_module'
                    -this JSON command is sent to host (conn_socket)
                        -expects return of "ID" and "Result"
                    -delete_req_deprecate_by_id(db_connection, host_id, id)

    ->> DCA.py
        -if 'cmd = deprecate_module'
            -calls send_deprecate_report(s, recv_dict["id"])
                -develops deprecate = f"DEPRECATE {cust_id} END"
                -send to query_layer4_5(deprecate)
                    ->> netlink_helper.py
                        -Develops connection to NetLink socket (to kernel)
                        -Develops Message with payload = DEPRECATE {cust_id} END
                        -gets these on the same fd to the kernel
                -sock.send(msg)
                    ->> netlink_helper.py
                        -Sends msg via send() function in Connection object
                        -Returns number of bytes sent
                -report = sock.recve()
                    ->> netlink_helper.py
                        -data = number of bytes returned from send() function
                        -struct.unpack is used to store data from the netlink socket
                        -msg is created with Message class data
                -report is decoded from bytes format (received from recv call in netlink_helper)
                -only data before semi colon is selected i.e. payload.split(";")[0]
                -returns JSON message to send_deprecate_report 
            -send_deprecate_report sends JSON data back to the NCO

    ->> NCO_revoke.py
        -expects "ID" and "result" to be returned from the DCA (should be 'success')
        -Deletes module from req_revocation (only if deprecate argument was not given)

    






